version: 2.1

commands:  
  destroy-environment:
    description: Destroy backend-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy frontend and backend environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/33mKxWBEF22qmFmoGoyyU9/migrations-${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
       - image: cimg/aws:2022.11
    steps:
      - checkout
      - run:
          name: Print workflow id
          command: |
            echo WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add backend ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}” --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.11-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1d:f4:08:6a:79:e8:e4:88:6e:e4:f1:a8:ad:00:01:b4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install aws cli
          command: |
            apk add aws-cli
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs
            apk add --update npm
            apk add --update ansible
      - run:
          name: Print inventory list
          command: |
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Create environment varibales
          command: |
            echo -e "NODE_ENV=local\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}\nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            cat backend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - run:
          name: Install aws cli
          command: |
            sudo apt install unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i --legacy-peer-deps
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/33mKxWBEF22qmFmoGoyyU9/migrations -d '1'
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install aws cli
          command: |
            sudo apt install unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            aws --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
      - destroy-environment
      
  deploy-backend:
    docker:
      - image: python:3.11-alpine
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["1d:f4:08:6a:79:e8:e4:88:6e:e4:f1:a8:ad:00:01:b4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add tar curl
            apk add --update nodejs
            apk add --update npm
            apk add --update ansible
            apk add aws-cli
      - run:
          name: Build backend
          command: |
            cd backend
            npm i --legacy-peer-deps
            npm run build
      - run:
          name: Create backend artifact
          command: | 
            tar czvf backend-artifact.tar.gz backend
      - run:
          name: Deploy backend
          command: | 
            cd ~/project/.circleci/ansible
            echo "Contents of the inventory.txt file ----"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Wait for server
          command: |
            sleep 30
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add aws-cli
            apk --no-cache add curl  
      - run:
          name: Print inventory list
          command: |
            echo ---inventory---
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: cimg/aws:2022.11
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkFlowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo $OldWorkFlowID >> ~/project/OldWorkFlowID.txt
            cat ~/project/OldWorkFlowID.txt

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

            echo OldWorkflowId: "${OldWorkFlowID}"
            echo Current WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkFlowID.txt
      - revert-migrations
      - destroy-environment

  cleanup:
      docker:
        - image: cimg/aws:2022.11
      steps:
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(cat ~/project/OldWorkFlowID.txt)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}" 

              if [[ -z "${OldWorkflowID}" && "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
              then
                echo "---Infrastructure cleanup start---"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                echo "---Infrastructure cleanup end---"
              else
                echo "---No infrastructure to cleanup---"
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
          